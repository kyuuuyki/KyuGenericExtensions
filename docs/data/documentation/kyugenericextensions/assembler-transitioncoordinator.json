{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-Assembler"},{"type":"text","text":", scenes easily transition between each other by informing the TransitionCoordinator, which handles all coordination without requiring any extra steps from the scenes."}]},{"anchor":"Definitions-and-usages","level":2,"type":"heading","text":"Definitions and usages"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two main types of navigation:"}]},{"anchor":"Static-Navigation-Type","level":3,"type":"heading","text":"Static Navigation Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a straightforward form of navigation, encompassing actions like push, present, back, etc. The conditions for this type remain fixed and do not change under any circumstances."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, pushing an InformationScene when tapping on the info button."}]},{"anchor":"Present","level":4,"type":"heading","text":"Present"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Present the destination scene constructed with parameters on the presenting window."}]},{"type":"codeListing","syntax":"swift","code":["transitionCoordinator.performNavigation(","\tNavigationType.present(","\t\tsceneName: StartingSceneModule.moduleName,","\t\tparameters: nil","\t),","\tanimated: true,","\tcompletion: nil",")"]},{"anchor":"Push","level":4,"type":"heading","text":"Push"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Push the destination scene, constructed with parameters, to the navigation controller on the presenting window. If there is no navigation controller, this operation will have no effect."}]},{"type":"codeListing","syntax":"swift","code":["transitionCoordinator.performNavigation(","\tNavigationType.push(","\t\tsceneName: StartingSceneModule.moduleName,","\t\tparameters: nil","\t),","\tanimated: true,","\tcompletion: nil",")"]},{"anchor":"Present--Push","level":4,"type":"heading","text":"Present & Push"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Present the destination scene, constructed with parameters, as the root view controller of a new navigation controller, disregarding the existing navigation controller on the presenting window."}]},{"type":"codeListing","syntax":"swift","code":["transitionCoordinator.performNavigation(","\tNavigationType.presentAndPush(","\t\tsceneName: StartingSceneModule.moduleName,","\t\tparameters: nil","\t),","\tanimated: true,","\tcompletion: nil",")"]},{"anchor":"Back","level":4,"type":"heading","text":"Back"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pop the scene from the navigation controller on the presenting window. If there is no navigation controller, this operation will dismiss the presenting view controller."}]},{"type":"codeListing","syntax":"swift","code":["transitionCoordinator.performNavigation(","\tNavigationType.back,","\tanimated: true,","\tcompletion: nil",")"]},{"anchor":"Reset","level":4,"type":"heading","text":"Reset"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reconfigure the assembler to a state similar to the application’s initial opening."}]},{"type":"codeListing","syntax":"swift","code":["transitionCoordinator.performNavigation(","\tNavigationType.reset,","\tanimated: true,","\tcompletion: nil",")"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When generating a project using "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/kyuuuyki\/KyuSwiftTemplates.git"},{"type":"text","text":", these static NavigationTypes should be automatically generated."}]}],"type":"aside","name":"Note"},{"anchor":"Dynamic-Navigation-Type","level":3,"type":"heading","text":"Dynamic Navigation Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This navigation type is more adaptable, featuring coordination conditions that can be intricate and change based on the current situation."}]},{"anchor":"Conditional-Navigation","level":4,"type":"heading","text":"Conditional Navigation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This navigation type assesses the defined requirements of the destination before proceeding to navigate to it. It acts like a fence to your backyard that requires a key for access. However, if you already have the key, you can open it without needing any additional steps."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, consider the scenario of pushing the ProfileScene when the user is already logged in. If the user is not logged in, the navigation will push the LoginScene first and later proceed to the destination after a successful login."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"assembler-transitioncoordinator-01"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Router.swift","transitionCoordinator.performNavigation(","\tNavigationType.present(","\t\tsceneName: ProfileSceneModule.moduleName,","\t\tparameters: nil","\t),","\tanimated: true,","\tcompletion: nil",")"]},{"type":"codeListing","syntax":"swift","code":["\/\/ TransitionCoordinator.swift","...","case .present(let sceneName, let parameters):","\tguard let viewController = try? resolveScene(","\t\tsceneName: sceneName,","\t\tparameters: parameters","\t) else {","\t\treturn","\t}","\t","\t\/\/ MARK: CONDITION STARTS","\tif [destination scene require authenticated user only] && [user is not authenticated] {","\t\t\/\/ Proceed with navigation after a successful login.","\t\tvar loginCompletion: (() -> Void) = {","\t\t\tself.performNavigation(","\t\t\t\tNavigationType.present(","\t\t\t\t\tsceneName: sceneName,","\t\t\t\t\tparameters: parameters","\t\t\t\t),","\t\t\t\tanimated: animated,","\t\t\t\tcompletion: completion","\t\t\t)","\t\t}","\t\t","\t\t\/\/ Navigate to the LoginScene and invoke the `loginCompletion` upon successful login.","\t\tself.performNavigation(","\t\t\tNavigationType.present(","\t\t\t\tsceneName: LoginSceneModule.moduleName,","\t\t\t\tparameters: [completion: loginCompletion]","\t\t\t),","\t\t\tanimated: true,","\t\t\tcompletion: nil","\t\t)","\t\treturn","\t}","\t\/\/ MARK: CONDITION ENDS","\t","\tif let presentingViewController {","\t\tpresentingViewController.navigationController?.pushViewController(","\t\t\tviewController,","\t\t\tanimated: animated","\t\t)","\t} else {","\t\tpresentingWindow?.rootViewController = viewController","\t}","\t","\tcompletion?()","..."]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Please be mindful of the potential ambiguity in the completion parameter. In each navigation type, there is a completion parameter that refers to the navigation completion, which is called when the navigation is complete. On the other hand, the navigation for SceneModule’s parameters will be called after a specific action within the scene."}]}],"type":"aside","name":"Warning"},{"anchor":"Custom-Navigation","level":4,"type":"heading","text":"Custom Navigation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike Conditional Navigation, this navigation type is commonly used in dynamically evolving flows where we don’t know the destination in advance, making it challenging to determine predefined requirements. However, this navigation type offers greater flexibility than Conditional Navigation because it can be customized like a thread with its own conditions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This flexibility is evident in more complex flows, such as creating a new shopping cart in an e-commerce application. This process involves steps like selecting the delivery method, choosing a delivery address, selecting a store, creating the cart, and finally navigating to the designated scene, which in this case is the StoreHomepageScene."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"assembler-transitioncoordinator-02"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Router.swift","transitionCoordinator.performNavigation(","\tNavigationType.createNewCart(parameters: nil),","\tanimated: true,","\tcompletion: nil",")"]},{"type":"codeListing","syntax":"swift","code":["\/\/ TransitionCoordinator.swift","...","case .createNewCart(let parameters):","\tlet deliveryMethod = parameters[\"deliveryMethod\"] as? DeliveryMethod","\tlet address = parameters[\"address\"] as? Address","\tlet store = parameters[\"store\"] as? Store","\tlet createNewCartCompletion = parameters[\"completion\"] as? (() -> Void)","\t","\t\/\/ Delivery Method Selection","\tguard let deliveryMethod else {","\t\tnavigateToDeliveryMethodSelectionView { deliveryMethod in","\t\t\tvar updatedParameters = parameters","\t\t\tupdatedParameters[\"deliveryMethod\"] = deliveryMethod","\t\t\tself.performNavigation(","\t\t\t\tNavigationType.createNewCart(parameters: updatedParameters),","\t\t\t\tanimated: true,","\t\t\t\tcompletion: nil","\t\t\t)","\t\t}","\t\treturn","\t}","\t","\t\/\/ Delivery Address Selection","\tguard let address else {","\t\tnavigateToDeliveryAddressSelectionView { address in","\t\t\tvar updatedParameters = parameters","\t\t\tupdatedParameters[\"address\"] = address","\t\t\tself.performNavigation(","\t\t\t\tNavigationType.createNewCart(parameters: updatedParameters),","\t\t\t\tanimated: true,","\t\t\t\tcompletion: nil","\t\t\t)","\t\t}","\t\treturn","\t}","\t","\t\/\/ Store Selection","\tguard let store else {","\t\tnavigateToStoreSelectionView { store in","\t\t\tvar updatedParameters = parameters","\t\t\tupdatedParameters[\"store\"] = store","\t\t\tself.performNavigation(","\t\t\t\tNavigationType.createNewCart(parameters: updatedParameters),","\t\t\t\tanimated: true,","\t\t\t\tcompletion: nil","\t\t\t)","\t\t}","\t\treturn","\t}","\t","\t\/\/ Cart Creation","\tnavigateToCartCreationView(","\t\tdeliveryMethod: deliveryMethod,","\t\taddress: address,","\t\tstore: store","\t) {","\t\tif let createNewCartCompletion {","\t\t\tcreateNewCartCompletion()","\t\t} else {","\t\t\tself.performNavigation(","\t\t\t\tNavigationType.goToStoreHomepageScene,","\t\t\t\tanimated: true,","\t\t\t\tcompletion: nil","\t\t\t)","\t\t}","\t}","..."]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Please be mindful of the potential ambiguity in the completion parameter. In each navigation type, there is a completion parameter that refers to the navigation completion, which is called when the navigation is complete. On the other hand, the navigation for SceneModule’s parameters will be called after a specific action within the scene."}]}],"type":"aside","name":"Warning"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These dynamic navigation can be applied to various navigation types. You are free to customize the TransitionCoordinator and NavigationType as you see fit."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/kyugenericextensions\/assembler-transitioncoordinator"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-TransitionCoordinator","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A coordinating handler."}],"kind":"article","metadata":{"roleHeading":"Article","title":"TransitionCoordinator","role":"article","modules":[{"name":"KyuGenericExtensions"}]},"hierarchy":{"paths":[["doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions","doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-Overview"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-Assembler"],"generated":true}],"references":{"doc://KyuGenericExtensions/documentation/KyuGenericExtensions/Assembler-Overview":{"role":"collectionGroup","title":"Getting Started with Assembler","abstract":[{"type":"text","text":"Explore the detail of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Assembler"}]},{"type":"text","text":" and grasp how it can benefit your project."}],"identifier":"doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-Overview","kind":"article","type":"topic","url":"\/documentation\/kyugenericextensions\/assembler-overview"},"doc://KyuGenericExtensions/documentation/KyuGenericExtensions/Assembler-Assembler":{"role":"article","title":"Assembler & Container","abstract":[{"type":"text","text":"A dependency manager and its container."}],"identifier":"doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions\/Assembler-Assembler","kind":"article","type":"topic","url":"\/documentation\/kyugenericextensions\/assembler-assembler"},"assembler-transitioncoordinator-01":{"alt":null,"type":"image","identifier":"assembler-transitioncoordinator-01","variants":[{"url":"\/images\/assembler-transitioncoordinator-01.png","traits":["1x","light"]},{"url":"\/images\/assembler-transitioncoordinator-01~dark.png","traits":["1x","dark"]}]},"assembler-transitioncoordinator-02":{"alt":null,"type":"image","identifier":"assembler-transitioncoordinator-02","variants":[{"url":"\/images\/assembler-transitioncoordinator-02.png","traits":["1x","light"]},{"url":"\/images\/assembler-transitioncoordinator-02~dark.png","traits":["1x","dark"]}]},"doc://KyuGenericExtensions/documentation/KyuGenericExtensions":{"role":"collection","title":"KyuGenericExtensions","abstract":[{"type":"text","text":"Simple extensions to make coding easier."}],"identifier":"doc:\/\/KyuGenericExtensions\/documentation\/KyuGenericExtensions","kind":"symbol","type":"topic","url":"\/documentation\/kyugenericextensions"},"https://github.com/kyuuuyki/KyuSwiftTemplates.git":{"title":"KyuSwiftTemplates","titleInlineContent":[{"type":"text","text":"KyuSwiftTemplates"}],"type":"link","identifier":"https:\/\/github.com\/kyuuuyki\/KyuSwiftTemplates.git","url":"https:\/\/github.com\/kyuuuyki\/KyuSwiftTemplates.git"}}}